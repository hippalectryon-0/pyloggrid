image: "tempuser8755/uv-clang15-omp:latest"  # custom image with python, clang15+openmp, hdf5, uv, rust installed
# Dockerfile:
## FROM ubuntu:latest
## RUN DEBIAN_FRONTEND=noninteractive apt update
## RUN DEBIAN_FRONTEND=noninteractive apt install -y git build-essential clang-15 libomp-15-dev pkg-config libhdf5-dev curl python3-dev
## RUN update-alternatives --install /usr/bin/clang clang /usr/bin/clang-15 100
## RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y  # install rust
## RUN curl -LsSf https://astral.sh/uv/install.sh | sh
## ENV PATH="/root/.local/bin:/root/.cargo/bin:$PATH"
## RUN cargo --help
## RUN uv --help
#
# docker build -t tempuser8755/uv-clang15-omp .
# (if necessary: docker login)
# docker push tempuser8755/uv-clang15-omp

cache:
  paths:
    - pyloggrid/LogGrid/*.so

# different stages in the pipeline
stages:
  - build
  - lint
  - test
  - benchmark
  - deploy

uv-install:
  stage: build
  variables:
    UV_CACHE_DIR: .uv-cache
  cache:
    - key:
        files:
          - uv.lock
      paths:
        - $UV_CACHE_DIR
  script:
    - uv sync --group docs --group examples
    - uv build
    - uv cache prune --ci

pre-commit:
  stage: lint
  needs: [ "uv-install" ]
  interruptible: true
  script:
    - uv run pre-commit run --all-files --show-diff-on-failure

unittest:
  stage: test
  needs: [ "uv-install" ]
  interruptible: true
  script:
    - uv run pytest -v --junitxml=report.xml --cov=. --cov-report xml:coverage.xml --cov-report term
  artifacts: # reports for gitlab pipelines
    when: always
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  coverage: /(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/

benchmark:
  stage: benchmark
  needs: [ "uv-install" ]
  interruptible: true
  script:
    - cd Utils
    - uv run benchmarking_parallel.py
    - uv run benchmarking_anyparam.py
  artifacts:
    paths:
      - Utils/*.png

pages-test:
  stage: deploy
  needs: [ "benchmark" ]
  dependencies:
    - benchmark
  script:
    - uv sync --group docs
    - mv Utils/*.png docs/static/img/benchmark
    - uv run sphinx-build -b html docs docs/_build
  artifacts:
    paths:
      - public
  except:
    - master

pages:
  stage: deploy
  needs: [ "benchmark" ]
  dependencies:
    - benchmark
  script:
    - uv sync --group docs
    - mv Utils/*.png docs/static/img/benchmark
    - uv run sphinx-build -b html docs docs/_build
    - mv docs/_build public
  artifacts:
    paths:
      - public
  only:
    - master

pypi:
  stage: deploy  # publish to gitlab package repo & pypi
  needs: [ "unittest" ]
  allow_failure: true
  script:
    - uv build
    - uv publish --token $PYPI_API_TOKEN
  rules:
    - if: $CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/
